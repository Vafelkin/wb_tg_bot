import requests
import schedule
import time
import signal
import sys
from datetime import datetime, timedelta
from telegram.ext import Application
from config import (
    TELEGRAM_BOT_TOKEN,
    TELEGRAM_CHAT_ID,
    WB_API_TOKEN,
    WB_API_BASE_URL,
    CHECK_INTERVAL,
    FEEDBACK_CHECK_INTERVAL,
    ORDERS_DAYS_LOOK_BACK,
    MAX_ORDERS_PER_REQUEST,
    PAGINATION_DELAY
)

class WildberriesAPI:
    def __init__(self, token):
        self.token = token
        self.headers = {'Authorization': token}
        self._last_order_time = datetime.now() - timedelta(days=ORDERS_DAYS_LOOK_BACK)
        self._processed_orders = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö srid
        self._last_feedback_check = None
    
    def _parse_date(self, date_str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        formats = [
            '%Y-%m-%dT%H:%M:%S.%fZ',  # –° –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
            '%Y-%m-%dT%H:%M:%S',      # –ë–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
            '%Y-%m-%dT%H:%M:%SZ'      # –° Z, –Ω–æ –±–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
        ]
        
        for fmt in formats:
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
    
    def get_new_orders(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å Wildberries —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        all_orders = []
        next_date_from = self._last_order_time.strftime('%Y-%m-%dT%H:%M:%S.000Z')
        
        while True:
            try:
                url = f"{WB_API_BASE_URL}/api/v1/supplier/orders"
                response = requests.get(
                    url,
                    headers={'Authorization': f'Bearer {self.token}'},
                    params={
                        'dateFrom': next_date_from,
                        'flag': 0  # 0 - –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
                    }
                )
                response.raise_for_status()
                orders = response.json()
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                if not orders:
                    break
                    
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
                new_orders = [
                    order for order in orders 
                    if order.get('srid') not in self._processed_orders
                ]
                all_orders.extend(new_orders)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                self._processed_orders.update(order.get('srid') for order in new_orders)
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(orders) < MAX_ORDERS_PER_REQUEST:
                    break
                    
                # –ë–µ—Ä–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                next_date_from = orders[-1]['lastChangeDate']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(PAGINATION_DELAY)
                
            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
                break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if all_orders:
            self._last_order_time = max(
                self._parse_date(order['date'])
                for order in all_orders
            )
        
        return all_orders

    def check_new_feedbacks(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –º–∏–Ω—É—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        current_time = datetime.now()
        if self._last_feedback_check and (current_time - self._last_feedback_check).total_seconds() < 60:
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã

        try:
            url = "https://feedbacks-api.wildberries.ru/api/v1/new-feedbacks-questions"
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            result = response.json()

            self._last_feedback_check = current_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            if result.get('error'):
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {result.get('errorText')}")
                if result.get('additionalErrors'):
                    print(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏: {', '.join(result['additionalErrors'])}")
                return None

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            data = result.get('data', {})
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö –∏ –≤–æ–ø—Ä–æ—Å–∞—Ö
            feedback_info = {
                'has_new_feedbacks': data.get('hasNewFeedbacks', False),
                'has_new_questions': data.get('hasNewQuestions', False),
                'feedbacks_count': data.get('feedbacksCount', 0),
                'questions_count': data.get('questionsCount', 0)
            }
            
            return feedback_info

        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return None

class TelegramNotifier:
    def __init__(self, bot_token, chat_id):
        self.bot_token = bot_token
        self.chat_ids = [id.strip() for id in chat_id.split(',')]
        self.app = Application.builder().token(bot_token).build()
    
    async def send_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        try:
            for chat_id in self.chat_ids:
                await self.app.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode='HTML'
                )
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def format_order_message(order):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
    wb_api = WildberriesAPI(WB_API_TOKEN)
    order_date = wb_api._parse_date(order['date'])
    return (
        f"üõç <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        f"üìù –ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞: {order.get('supplierArticle')}\n"
        f"üí≥ –ó–∞–ø–ª–∞—Ç–∏–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: {order.get('finishedPrice')} ‚ÇΩ\n"
        f"üíµ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: {order.get('priceWithDisc')} ‚ÇΩ\n"
        f"üí∞ –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {order.get('totalPrice')} ‚ÇΩ\n"
        f"üìç –†–µ–≥–∏–æ–Ω: {order.get('regionName')} –æ–±–ª., {order.get('oblastOkrugName')}\n"
        f"üè™ –°–∫–ª–∞–¥: {order.get('warehouseName')} ({order.get('warehouseType')})\n"
        f"üìÖ –î–∞—Ç–∞: {order_date.strftime('%d.%m.%Y %H:%M')}"
    )

async def send_status_notification(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞"""
    notifier = TelegramNotifier(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    await notifier.send_notification(message)

async def check_orders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    wb_api = WildberriesAPI(WB_API_TOKEN)
    notifier = TelegramNotifier(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})...")
    
    new_orders = wb_api.get_new_orders()
    if new_orders:
        print(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(new_orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        for order in new_orders:
            message = format_order_message(order)
            await notifier.send_notification(message)
            await asyncio.sleep(0.5)
    else:
        print("üì≠ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")

async def check_feedbacks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    wb_api = WildberriesAPI(WB_API_TOKEN)
    notifier = TelegramNotifier(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    
    print(f"üëÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})...")
    
    feedback_data = wb_api.check_new_feedbacks()
    if feedback_data is not None:
        has_new = feedback_data['has_new_feedbacks'] or feedback_data['has_new_questions']
        if has_new:
            message = (
                "‚ùóÔ∏è <b>–ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã!</b>\n\n"
                f"üìù –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {feedback_data['feedbacks_count']}\n"
                f"‚ùì –ù–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {feedback_data['questions_count']}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB."
            )
            await notifier.send_notification(message)
            print(f"üì¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {feedback_data['feedbacks_count']} –æ—Ç–∑—ã–≤–æ–≤, {feedback_data['questions_count']} –≤–æ–ø—Ä–æ—Å–æ–≤")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    print("\n‚õîÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    asyncio.run(send_status_notification(
        "üî¥ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
        f"‚è± –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
    ))
    sys.exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤ Wildberries...")
    print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
    print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {FEEDBACK_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    asyncio.run(send_status_notification(
        "üü¢ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω</b>\n\n"
        f"‚è± –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {CHECK_INTERVAL // 60} –º–∏–Ω—É—Ç\n"
        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {FEEDBACK_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥"
    ))
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    asyncio.run(check_orders())
    asyncio.run(check_feedbacks())
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    schedule.every(CHECK_INTERVAL).seconds.do(lambda: asyncio.run(check_orders()))
    schedule.every(FEEDBACK_CHECK_INTERVAL).seconds.do(lambda: asyncio.run(check_feedbacks()))
    
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    import asyncio
    main() 