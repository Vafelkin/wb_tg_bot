import requests
import asyncio  # –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
import schedule
import time
import signal
import sys
import traceback  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –ø–µ—á–∞—Ç–∏ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
import json  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
from datetime import datetime, timedelta, timezone
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, CallbackQueryHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from config import (
    TELEGRAM_BOT_TOKEN,
    TELEGRAM_CHAT_ID,
    WB_API_TOKEN,
    WB_FEEDBACK_TOKEN,
    WB_API_BASE_URL,
    WB_FEEDBACK_API_URL,
    CHECK_INTERVAL,
    MAX_ORDERS_PER_REQUEST,
    PAGINATION_DELAY
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]}] {message}")

def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)"""
    return datetime.now(timezone.utc) + timedelta(hours=3)

class WildberriesAPI:
    def __init__(self, stats_token, feedback_token):
        log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WildberriesAPI")
        self.stats_token = stats_token
        self.feedback_token = feedback_token
        self.stats_headers = {'Authorization': stats_token}
        self.feedback_headers = {'Authorization': f'Bearer {feedback_token}'}
        self._last_order_time = datetime.now(timezone.utc)
        self._last_sales_time = datetime.now(timezone.utc)
        self._last_feedback_check = datetime.now(timezone.utc)
        self._processed_orders = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö srid
        self._processed_sales = set()   # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö saleID
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
        if not stats_token or len(stats_token) < 10:
            log("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ç–æ–∫–µ–Ω API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        if not feedback_token or len(feedback_token) < 10:
            log("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ç–æ–∫–µ–Ω API –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
            
        log("‚úÖ WildberriesAPI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _parse_date(self, date_str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        formats = [
            '%Y-%m-%dT%H:%M:%S.%fZ',  # –° –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
            '%Y-%m-%dT%H:%M:%S',      # –ë–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
            '%Y-%m-%dT%H:%M:%SZ'      # –° Z, –Ω–æ –±–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
        ]
        
        for fmt in formats:
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        log(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.")
        return datetime.now()
    
    def get_new_orders(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å Wildberries —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        log(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å {self._last_order_time.strftime('%Y-%m-%dT%H:%M:%S')}")
        all_orders = []
        next_date_from = self._last_order_time.strftime('%Y-%m-%dT%H:%M:%S.000Z')
        
        try:
            while True:
                try:
                    url = f"{WB_API_BASE_URL}/api/v1/supplier/orders"
                    log(f"üîÑ –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤: {url} —Å dateFrom={next_date_from}")
                    
                    response = requests.get(
                        url,
                        headers=self.stats_headers,
                        params={
                            'dateFrom': next_date_from,
                            'flag': 0  # 0 - –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
                        },
                        timeout=30  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
                    response.raise_for_status()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    orders = response.json()
                    log(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –æ—Ç API")
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                    if not orders:
                        break
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
                    new_orders = [
                        order for order in orders 
                        if order.get('srid') not in self._processed_orders
                    ]
                    log(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(new_orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
                    all_orders.extend(new_orders)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                    self._processed_orders.update(order.get('srid') for order in new_orders)
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                    if len(orders) < MAX_ORDERS_PER_REQUEST:
                        break
                        
                    # –ë–µ—Ä–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    if orders:
                        next_date_from = orders[-1]['lastChangeDate']
                        log(f"üîÑ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å —Å dateFrom={next_date_from}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    log(f"‚è± –û–∂–∏–¥–∞–Ω–∏–µ {PAGINATION_DELAY} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
                    time.sleep(PAGINATION_DELAY)
                    
                except requests.exceptions.HTTPError as e:
                    log(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
                    if e.response.status_code == 401:
                        log("üîë –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π")
                    break
                except requests.exceptions.Timeout as e:
                    log(f"‚è± –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
                    break
                except requests.exceptions.RequestException as e:
                    log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
                    break
                except Exception as e:
                    log(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
                    break
        finally:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            self._last_order_time = datetime.now(timezone.utc)
            log(f"‚è± –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self._last_order_time.strftime('%Y-%m-%dT%H:%M:%S')}")
            
        return all_orders

    def check_new_feedbacks(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        log(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å {self._last_feedback_check.strftime('%Y-%m-%dT%H:%M:%S')}")
        
        try:
            url = f"{WB_FEEDBACK_API_URL}/api/v1/new-feedbacks-questions"
            log(f"üîÑ –ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–æ–≤: {url}")
            
            response = requests.get(url, headers=self.feedback_headers, timeout=30)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
            response.raise_for_status()
            
            result = response.json()
            log(f"üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ –æ—Ç–∑—ã–≤–∞–º: {result}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            if result.get('error'):
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {result.get('errorText')}")
                if result.get('additionalErrors'):
                    log(f"‚ùå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏: {', '.join(result['additionalErrors'])}")
                return None

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            data = result.get('data', {})
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö –∏ –≤–æ–ø—Ä–æ—Å–∞—Ö
            feedback_info = {
                'has_new_feedbacks': data.get('hasNewFeedbacks', False),
                'has_new_questions': data.get('hasNewQuestions', False),
                'feedbacks_count': data.get('feedbacksCount', 0),
                'questions_count': data.get('questionsCount', 0)
            }
            
            log(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {feedback_info}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self._last_feedback_check = datetime.now(timezone.utc)
            log(f"‚è± –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self._last_feedback_check.strftime('%Y-%m-%dT%H:%M:%S')}")
            
            return feedback_info

        except requests.exceptions.HTTPError as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {e}")
            if e.response.status_code == 401:
                log("üîë –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π")
            return None
        except requests.exceptions.Timeout as e:
            log(f"‚è± –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}")
            return None
        except requests.exceptions.RequestException as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return None
        except Exception as e:
            log(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {e}")
            return None

    def get_sales(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂–∞—Ö —Å Wildberries —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        log(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂ —Å {self._last_sales_time.strftime('%Y-%m-%dT%H:%M:%S')}")
        all_sales = []
        date_from = self._last_sales_time.strftime('%Y-%m-%dT%H:%M:%S.000Z')
        
        try:
            while True:
                try:
                    url = f"{WB_API_BASE_URL}/api/v1/supplier/sales"
                    log(f"üîÑ –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥–∞–∂: {url} —Å dateFrom={date_from}")
                    
                    response = requests.get(
                        url,
                        headers=self.stats_headers,
                        params={
                            'dateFrom': date_from,
                            'flag': 0  # 0 - –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏
                        },
                        timeout=30  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
                    response.raise_for_status()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    sales = response.json()
                    log(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(sales)} –ø—Ä–æ–¥–∞–∂ –æ—Ç API")
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                    if not sales:
                        break
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
                    new_sales = [
                        sale for sale in sales 
                        if sale.get('saleID') not in self._processed_sales
                    ]
                    log(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(new_sales)} –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥–∞–∂")
                    all_sales.extend(new_sales)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
                    self._processed_sales.update(sale.get('saleID') for sale in new_sales if sale.get('saleID'))
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                    if len(sales) < MAX_ORDERS_PER_REQUEST:
                        break
                        
                    # –ë–µ—Ä–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    if sales:
                        date_from = sales[-1]['lastChangeDate']
                        log(f"üîÑ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å —Å dateFrom={date_from}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    log(f"‚è± –û–∂–∏–¥–∞–Ω–∏–µ {PAGINATION_DELAY} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
                    time.sleep(PAGINATION_DELAY)
                    
                except requests.exceptions.HTTPError as e:
                    log(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂: {e}")
                    if e.response.status_code == 401:
                        log("üîë –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π")
                    break
                except requests.exceptions.Timeout:
                    log("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–∞–π–º–∞—É—Ç).")
                    break
                except requests.exceptions.ConnectionError:
                    log("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.")
                    break
                except requests.exceptions.RequestException as e:
                    log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂: {e}")
                    break
                except Exception as e:
                    log(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂: {e}")
                    break
        finally:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–∞–∂ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            self._last_sales_time = datetime.now(timezone.utc)
            log(f"‚è± –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–∞–∂ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self._last_sales_time.strftime('%Y-%m-%dT%H:%M:%S')}")
            
        return all_sales

    def check_api_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
        log("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ API")
        results = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        try:
            log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            url = f"{WB_API_BASE_URL}/api/v1/supplier/orders"
            date_from = (datetime.now() - timedelta(hours=1)).strftime('%Y-%m-%dT%H:%M:%S.000Z')
            log(f"üî§ URL –∑–∞–ø—Ä–æ—Å–∞: {url}")
            log(f"üî§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: dateFrom={date_from}, flag=0")
            log(f"üî§ –ó–∞–≥–æ–ª–æ–≤–∫–∏: Authorization={self.stats_token[:10]}...")
            
            start_time = datetime.now()
            response = requests.get(
                url,
                headers=self.stats_headers,
                params={
                    'dateFrom': date_from,
                    'flag': 0
                },
                timeout=10
            )
            elapsed_time = (datetime.now() - start_time).total_seconds()
            
            log(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
            log(f"‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {elapsed_time:.2f} —Å–µ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
            try:
                response_data = response.json()
                log(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(response_data) if isinstance(response_data, list) else '–ù–µ –º–∞—Å—Å–∏–≤'}")
            except ValueError:
                log("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON")
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ 200, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            if response.status_code != 200:
                log(f"‚ö†Ô∏è –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–µ 200. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.text[:200]}...")
            
            results['statistics_api'] = {
                'status': 'OK' if response.status_code == 200 else 'ERROR',
                'code': response.status_code,
                'response_time': f"{elapsed_time:.2f} —Å–µ–∫",
                'data_received': True if response.status_code == 200 and response.text else False
            }
        except requests.exceptions.Timeout:
            log("‚è± –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            results['statistics_api'] = {
                'status': 'ERROR',
                'error': "–¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)"
            }
        except requests.exceptions.ConnectionError:
            log("üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            results['statistics_api'] = {
                'status': 'ERROR',
                'error': "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
            }
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            results['statistics_api'] = {
                'status': 'ERROR',
                'error': str(e)
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –æ—Ç–∑—ã–≤–æ–≤
        try:
            log("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –æ—Ç–∑—ã–≤–æ–≤...")
            url = f"{WB_FEEDBACK_API_URL}/api/v1/new-feedbacks-questions"
            log(f"üî§ URL –∑–∞–ø—Ä–æ—Å–∞: {url}")
            log(f"üî§ –ó–∞–≥–æ–ª–æ–≤–∫–∏: Authorization=Bearer {self.feedback_token[:10]}...")
            
            start_time = datetime.now()
            response = requests.get(url, headers=self.feedback_headers, timeout=10)
            elapsed_time = (datetime.now() - start_time).total_seconds()
            
            log(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API –æ—Ç–∑—ã–≤–æ–≤: {response.status_code}")
            log(f"‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {elapsed_time:.2f} —Å–µ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
            try:
                response_data = response.json()
                error = response_data.get('error', False)
                if error:
                    log(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response_data.get('errorText')}")
                    additional_errors = response_data.get('additionalErrors', [])
                    if additional_errors:
                        log(f"‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏: {', '.join(additional_errors)}")
            except ValueError:
                log("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON")
            
            results['feedback_api'] = {
                'status': 'OK' if response.status_code == 200 and not error else 'ERROR',
                'code': response.status_code,
                'response_time': f"{elapsed_time:.2f} —Å–µ–∫"
            }
            
            if error:
                results['feedback_api']['error'] = response_data.get('errorText', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
        except requests.exceptions.Timeout:
            log("‚è± –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –æ—Ç–∑—ã–≤–æ–≤")
            results['feedback_api'] = {
                'status': 'ERROR',
                'error': "–¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)"
            }
        except requests.exceptions.ConnectionError:
            log("üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –æ—Ç–∑—ã–≤–æ–≤")
            results['feedback_api'] = {
                'status': 'ERROR',
                'error': "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
            }
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –æ—Ç–∑—ã–≤–æ–≤: {e}")
            log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            results['feedback_api'] = {
                'status': 'ERROR',
                'error': str(e)
            }
        
        log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return results

class TelegramBot:
    def __init__(self, bot_token, chat_id, wb_api):
        log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramBot")
        self.bot_token = bot_token
        log(f"üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {bot_token[:10]}...")
        self.chat_ids = [id.strip() for id in chat_id.split(',')]
        log(f"üë• ID —á–∞—Ç–æ–≤: {self.chat_ids}")
        self.wb_api = wb_api
        
        log("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram...")
        self.app = Application.builder().token(bot_token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥)
        log("üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        log("üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.message_handler))
            log("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.app.add_handler(CommandHandler("status", self.status_command))
            log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /status –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            self.app.add_handler(CommandHandler("start", self.start_command))
            log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            self.app.add_handler(CommandHandler("help", self.help_command))
            log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /help –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            self.app.add_handler(CommandHandler("test", self.test_command))
            log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /test –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
            self.app.add_handler(CallbackQueryHandler(self.button_handler))
            log("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.app.add_error_handler(self.error_handler)
            log("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
            log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
        
        log("‚úÖ TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def button_handler(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
        
        log(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if str(query.from_user.id) not in self.chat_ids:
            log(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫
        if query.data == "status":
            # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
            log(f"üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã status –∏–∑ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            await self.status_callback(query)
        elif query.data == "help":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
            log(f"üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã help –∏–∑ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            await self.help_callback(query)
        elif query.data == "start":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            log(f"üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã start –∏–∑ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            await self.start_callback(query)
        elif query.data == "check_now":
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            log(f"üîÑ –ó–∞–ø—É—Å–∫ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            await self.check_now_callback(query)
        elif query.data == "test":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            log(f"üîÑ –ü–æ–∫–∞–∑ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            await self.test_callback(query)
        elif query.data == "test_order":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏ —É–¥–∞–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            log(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            success = await self.send_test_notification("order")
            
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
            if success:
                try:
                    # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
                    await query.message.edit_text(
                        "‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è",
                        parse_mode='HTML'
                    )
                    log(f"‚úÖ –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
                except Exception as e:
                    log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞: {e}")
            
        elif query.data == "test_sale":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–∫—É–ø –∏ —É–¥–∞–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            log(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ã–∫—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            success = await self.send_test_notification("sale")
            
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
            if success:
                try:
                    # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
                    await query.message.edit_text(
                        "‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∫—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è",
                        parse_mode='HTML'
                    )
                    log(f"‚úÖ –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ã–∫—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
                except Exception as e:
                    log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞: {e}")
            
        elif query.data == "test_feedback":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∑—ã–≤–µ –∏ —É–¥–∞–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            log(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            success = await self.send_test_notification("feedback")
            
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
            if success:
                try:
                    # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–≤–æ–π–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
                    await query.message.edit_text(
                        "‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è",
                        parse_mode='HTML'
                    )
                    log(f"‚úÖ –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
                except Exception as e:
                    log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞: {e}")
    
    async def start_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞ –≥–ª–∞–≤–Ω—É—é'"""
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å API", callback_data="status"),
                InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")
            ],
            [
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç", callback_data="test")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.message.edit_text(
            "üëã <b>–ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Wildberries</b>\n\n"
            "üìä –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã, –ø—Ä–æ–¥–∞–∂–∏ –∏ –æ—Ç–∑—ã–≤—ã.\n"
            "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        log(f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {query.from_user.id}")
    
    async def check_now_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            status_message = await query.message.edit_text(
                "üîç –í—ã–ø–æ–ª–Ω—è—é –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...",
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            )
            
            log(f"üîç –ù–∞—á–∞–ª–æ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
            orders_task = asyncio.create_task(check_orders_async(self, self.wb_api))
            feedbacks_task = asyncio.create_task(check_feedbacks_async(self, self.wb_api))
            sales_task = asyncio.create_task(check_sales_async(self, self.wb_api))
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            await asyncio.gather(orders_task, feedbacks_task, sales_task)
            
            log(f"‚úÖ –í–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            keyboard = [
                [
                    InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="check_now"),
                    InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
            await status_message.edit_text(
                "‚úÖ <b>–í–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                "–ï—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã, –≤—ã–∫—É–ø—ã –∏–ª–∏ –æ—Ç–∑—ã–≤—ã, "
                "–≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
                f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {get_moscow_time().strftime('%d.%m.%Y %H:%M:%S')}",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="check_now"),
                    InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await query.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
    
    async def status_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
            status_message = await query.message.edit_text(
                "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ API Wildberries...",
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
            log(f"üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            api_status = self.wb_api.check_api_status()
            log(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {api_status}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            log("üìù –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ")
            result_message = "üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ API Wildberries</b>\n\n"
            
            # –°—Ç–∞—Ç—É—Å API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_api = api_status.get('statistics_api', {})
            if stats_api.get('status') == 'OK':
                result_message += "‚úÖ <b>API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b> –†–∞–±–æ—Ç–∞–µ—Ç\n"
                result_message += f"‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats_api.get('response_time')}\n\n"
            else:
                result_message += "‚ùå <b>API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b> –û—à–∏–±–∫–∞\n"
                if 'error' in stats_api:
                    result_message += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {stats_api.get('error')}\n\n"
                else:
                    result_message += f"‚ö†Ô∏è –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {stats_api.get('code')}\n\n"
            
            # –°—Ç–∞—Ç—É—Å API –æ—Ç–∑—ã–≤–æ–≤
            feedback_api = api_status.get('feedback_api', {})
            if feedback_api.get('status') == 'OK':
                result_message += "‚úÖ <b>API –æ—Ç–∑—ã–≤–æ–≤:</b> –†–∞–±–æ—Ç–∞–µ—Ç\n"
                result_message += f"‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {feedback_api.get('response_time')}\n\n"
            else:
                result_message += "‚ùå <b>API –æ—Ç–∑—ã–≤–æ–≤:</b> –û—à–∏–±–∫–∞\n"
                if 'error' in feedback_api:
                    result_message += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {feedback_api.get('error')}\n\n"
                else:
                    result_message += f"‚ö†Ô∏è –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {feedback_api.get('code')}\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
            result_message += "ü§ñ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞</b>\n"
            result_message += f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {get_moscow_time().strftime('%d.%m.%Y %H:%M:%S')}\n"
            result_message += f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {CHECK_INTERVAL // 60} –º–∏–Ω—É—Ç\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status"),
                    InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")
                ],
                [
                    InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
                    InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            log(f"üì§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            log(f"üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result_message}")
            
            try:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
                await status_message.edit_text(
                    result_message,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                log(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            except Exception as edit_error:
                log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
                await query.message.reply_text(
                    result_message,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                log(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {query.from_user.id}")
                
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ status: {e}")
            log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            try:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                keyboard = [
                    [
                        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status"),
                        InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")
                    ],
                    [
                        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
                        InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=reply_markup
                )
            except Exception as e2:
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e2}")
    
    async def help_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏"""
        help_text = (
            "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Wildberries –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            "‚Ä¢ üõç –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n"
            "‚Ä¢ üí∞ –ù–æ–≤—ã—Ö –≤—ã–∫—É–ø–∞—Ö (–ø—Ä–æ–¥–∞–∂–∞—Ö)\n"
            "‚Ä¢ ‚≠êÔ∏è –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö –∏ –≤–æ–ø—Ä–æ—Å–∞—Ö\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API\n"
            "/test - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "/help - –ü–æ–∫–∞–∑ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏\n\n"
            "<b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!</b>\n\n"
            "üîç <b>–ö–Ω–æ–ø–∫–∞ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å\"</b> –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É "
            "–Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –≤—ã–∫—É–ø–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å API", callback_data="status"),
                InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")
            ],
            [
                InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start"),
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç", callback_data="test")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.edit_text(
            help_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        log(f"‚úÖ –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {query.from_user.id}")
    
    async def message_handler(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update.message:
            user_id = update.effective_user.id
            text = update.message.text
            log(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")
            
            # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
            if str(user_id) in self.chat_ids:
                log(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = [
                    [
                        InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å API", callback_data="status"),
                        InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "üëã –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –Ω–∏–∂–µ:",
                    reply_markup=reply_markup
                )
                log(f"‚úÖ –û—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    async def error_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –±–æ—Ç–∞ Telegram"""
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
        log(f"üîç –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
    
    async def start_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        log(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if str(user_id) not in self.chat_ids:
            log(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å API", callback_data="status"),
                InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")
            ],
            [
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç", callback_data="test")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Wildberries.</b>\n\n"
            "üìä –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö, –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ –æ—Ç–∑—ã–≤–∞—Ö.\n"
            "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        log(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    async def help_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = update.effective_user.id
        log(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if str(user_id) not in self.chat_ids:
            log(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        help_text = (
            "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Wildberries –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            "‚Ä¢ üõç –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n"
            "‚Ä¢ üí∞ –ù–æ–≤—ã—Ö –≤—ã–∫—É–ø–∞—Ö (–ø—Ä–æ–¥–∞–∂–∞—Ö)\n"
            "‚Ä¢ ‚≠êÔ∏è –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö –∏ –≤–æ–ø—Ä–æ—Å–∞—Ö\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API\n"
            "/test - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "/help - –ü–æ–∫–∞–∑ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏\n\n"
            "<b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!</b>\n\n"
            "üîç <b>–ö–Ω–æ–ø–∫–∞ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å\"</b> –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É "
            "–Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –≤—ã–∫—É–ø–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å API", callback_data="status"),
                InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")
            ],
            [
                InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start"),
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç", callback_data="test")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        log(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    async def status_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏ API"""
        try:
            log("üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /status")
            user_id = update.effective_user.id
            log(f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–æ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            log(f"üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            log(f"üë• –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ ID: {self.chat_ids}")
            has_access = str(user_id) in self.chat_ids
            log(f"‚úÖ –ò–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø: {has_access}")
            
            if not has_access:
                log(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return
            
            log(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            status_message = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ API Wildberries...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
            log(f"üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            api_status = self.wb_api.check_api_status()
            log(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {api_status}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            log("üìù –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ")
            result_message = "üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ API Wildberries</b>\n\n"
            
            # –°—Ç–∞—Ç—É—Å API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_api = api_status.get('statistics_api', {})
            if stats_api.get('status') == 'OK':
                result_message += "‚úÖ <b>API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b> –†–∞–±–æ—Ç–∞–µ—Ç\n"
                result_message += f"‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats_api.get('response_time')}\n\n"
            else:
                result_message += "‚ùå <b>API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b> –û—à–∏–±–∫–∞\n"
                if 'error' in stats_api:
                    result_message += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {stats_api.get('error')}\n\n"
                else:
                    result_message += f"‚ö†Ô∏è –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {stats_api.get('code')}\n\n"
            
            # –°—Ç–∞—Ç—É—Å API –æ—Ç–∑—ã–≤–æ–≤
            feedback_api = api_status.get('feedback_api', {})
            if feedback_api.get('status') == 'OK':
                result_message += "‚úÖ <b>API –æ—Ç–∑—ã–≤–æ–≤:</b> –†–∞–±–æ—Ç–∞–µ—Ç\n"
                result_message += f"‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {feedback_api.get('response_time')}\n\n"
            else:
                result_message += "‚ùå <b>API –æ—Ç–∑—ã–≤–æ–≤:</b> –û—à–∏–±–∫–∞\n"
                if 'error' in feedback_api:
                    result_message += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {feedback_api.get('error')}\n\n"
                else:
                    result_message += f"‚ö†Ô∏è –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {feedback_api.get('code')}\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
            result_message += "ü§ñ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞</b>\n"
            result_message += f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {get_moscow_time().strftime('%d.%m.%Y %H:%M:%S')}\n"
            result_message += f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {CHECK_INTERVAL // 60} –º–∏–Ω—É—Ç\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status"),
                    InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")
                ],
                [
                    InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
                    InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            log(f"üì§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            log(f"üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result_message}")
            
            try:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
                await status_message.edit_text(
                    result_message,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                log(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as edit_error:
                log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
                await update.message.reply_text(
                    result_message,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                log(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /status: {e}")
            log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            try:
                error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:\n{str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                keyboard = [
                    [
                        InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="status"),
                        InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if update.message:
                    await update.message.reply_text(
                        error_message,
                        reply_markup=reply_markup
                    )
                elif update.callback_query:
                    await update.callback_query.message.reply_text(
                        error_message,
                        reply_markup=reply_markup
                    )
            except Exception as e2:
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e2}")
    
    async def test_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        log(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if str(user_id) not in self.chat_ids:
            log(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("üõç –ó–∞–∫–∞–∑", callback_data="test_order"),
                InlineKeyboardButton("üí∞ –í—ã–∫—É–ø", callback_data="test_sale")
            ],
            [
                InlineKeyboardButton("‚≠êÔ∏è –û—Ç–∑—ã–≤", callback_data="test_feedback"),
                InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        log(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    async def send_test_notification(self, notification_type):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        log(f"üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞: {notification_type}")
        
        if notification_type == "order":
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
            test_order = {
                "date": datetime.now().strftime('%Y-%m-%dT%H:%M:%S.000Z'),
                "supplierArticle": "TEST-ARTICLE-123",
                "finishedPrice": "1500.00",
                "priceWithDisc": "1275.00",
                "totalPrice": "1350.00",
                "regionName": "–ú–æ—Å–∫–≤–∞",
                "oblastOkrugName": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥",
                "warehouseName": "–ö–æ–ª–µ–¥–∏–Ω–æ",
                "warehouseType": "Dropoff/–î–æ—Å—Ç–∞–≤–∫–∞"
            }
            message = format_order_message(test_order)
            
        elif notification_type == "sale":
            # –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∫—É–ø
            test_sale = {
                "date": datetime.now().strftime('%Y-%m-%dT%H:%M:%S.000Z'),
                "supplierArticle": "TEST-ARTICLE-456",
                "brand": "TestBrand",
                "subject": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
                "forPay": "2000.00",
                "feeWB": "200.00",
                "finishedPrice": "1800.00",
                "regionName": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
            }
            message = format_sale_message(test_sale)
            
        elif notification_type == "feedback":
            # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤
            feedback_data = {
                "has_new_feedbacks": True,
                "has_new_questions": True,
                "feedbacks_count": 2,
                "questions_count": 1
            }
            message = (
                "‚ùóÔ∏è <b>–ü—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å!</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç–∞–ª –ø—Ä–æ–¥–∞–≤—Ü–∞.\n\n"
                "<i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.</i>"
            )
        else:
            log(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_type}")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if notification_type != "feedback":  # –î–ª—è feedback —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏
            message += "\n\n<i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.</i>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
        for chat_id in self.chat_ids:
            try:
                log(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∏–ø–∞ {notification_type} –≤ —á–∞—Ç {chat_id}")
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
                keyboard = [
                    [
                        InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now"),
                        InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start")
                    ],
                    [
                        InlineKeyboardButton("üß™ –ï—â–µ —Ç–µ—Å—Ç—ã", callback_data="test"),
                        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                await self.app.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                log(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
        
        log(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ {notification_type} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True
    
    async def send_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        try:
            for chat_id in self.chat_ids:
                log(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
                await self.app.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode='HTML'
                )
                log(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Telegram"""
        log("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Telegram")
        try:
            log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            await self.app.initialize()
            log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            
            log("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            await self.app.start()
            log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
            
            log("üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            log(f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ updater: {self.app.updater}")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if hasattr(self.app.updater, 'url'):
                log(f"üîÑ URL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.app.updater.url}")
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            log("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            log("üìã –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: message, edited_message, channel_post, edited_channel_post, message_reaction, message_reaction_count, callback_query")
            log("‚öôÔ∏è –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è: 30 —Å–µ–∫, —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: 10 —Å–µ–∫")
            log("‚öôÔ∏è –ü—Ä–æ–ø—É—Å–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: –ù–µ—Ç")
            
            await self.app.updater.start_polling(
                drop_pending_updates=False,
                allowed_updates=["message", "edited_message", "channel_post", "edited_channel_post", "message_reaction", "message_reaction_count", "callback_query"],
                read_timeout=30,
                connect_timeout=10
            )
            log("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–æ")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
            for chat_id in self.chat_ids:
                try:
                    log(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    keyboard = [
                        [
                            InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å API", callback_data="status"),
                            InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="check_now")
                        ],
                        [
                            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
                            InlineKeyboardButton("üß™ –¢–µ—Å—Ç", callback_data="test")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await self.app.bot.send_message(
                        chat_id=chat_id,
                        text="ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                    log(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                except Exception as e:
                    log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
                    log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            
            log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã")
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            raise

    async def test_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        log(f"üß™ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("üõç –ó–∞–∫–∞–∑", callback_data="test_order"),
                InlineKeyboardButton("üí∞ –í—ã–∫—É–ø", callback_data="test_sale")
            ],
            [
                InlineKeyboardButton("‚≠êÔ∏è –û—Ç–∑—ã–≤", callback_data="test_feedback"),
                InlineKeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.message.edit_text(
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        log(f"‚úÖ –ú–µ–Ω—é —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {query.from_user.id}")

def format_order_message(order):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ (—Ç–æ–≤–∞—Ä –∑–∞–∫–∞–∑–∞–Ω, –Ω–æ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω)"""
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
        order_date = parse_date_string(order['date'])
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞: {e}")
        order_date = datetime.now()
    
    return (
        f"üõç <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        f"üìù –ê—Ä—Ç–∏–∫—É–ª: {order.get('supplierArticle')}\n"
        f"üí≥ –ó–∞–ø–ª–∞—Ç–∏–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: {order.get('finishedPrice')} ‚ÇΩ\n"
        f"üíµ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {order.get('priceWithDisc')} ‚ÇΩ\n"
        f"üìç –†–µ–≥–∏–æ–Ω: {order.get('regionName')} –æ–±–ª., {order.get('oblastOkrugName')}\n"
        f"üè™ –°–∫–ª–∞–¥: {order.get('warehouseName')} ({order.get('warehouseType')})\n"
        f"üìÖ –î–∞—Ç–∞: {order_date.strftime('%d.%m.%Y %H:%M')}"
    )

def format_sale_message(sale):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–∫—É–ø–µ (—Ç–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º)"""
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª–µ date –∏–ª–∏ lastChangeDate, –µ—Å–ª–∏ date –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        date_string = sale.get('date', sale.get('lastChangeDate'))
        sale_date = parse_date_string(date_string)
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã –ø—Ä–æ–¥–∞–∂–∏: {e}")
        sale_date = datetime.now()
    
    return (
        f"üí∞ <b>–ù–æ–≤—ã–π –≤—ã–∫—É–ø!</b>\n\n"
        f"üìù –ê—Ä—Ç–∏–∫—É–ª: {sale.get('supplierArticle')}\n"
        f"üíµ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {sale.get('finishedPrice', 0)} ‚ÇΩ\n"
        f"üßÆ –ö–æ–º–∏—Å—Å–∏—è: {sale.get('feeWB', 0)} ‚ÇΩ\n"
        f"üí∏ –ö –≤—ã–ø–ª–∞—Ç–µ: {sale.get('forPay', 0)} ‚ÇΩ\n"
        f"üìç –†–µ–≥–∏–æ–Ω: {sale.get('regionName', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÖ –î–∞—Ç–∞: {sale_date.strftime('%d.%m.%Y %H:%M')}"
    )

def parse_date_string(date_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    formats = [
        '%Y-%m-%dT%H:%M:%S.%fZ',  # –° –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
        '%Y-%m-%dT%H:%M:%S',      # –ë–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
        '%Y-%m-%dT%H:%M:%SZ'      # –° Z, –Ω–æ –±–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
    ]
    
    for fmt in formats:
        try:
            return datetime.strptime(date_str, fmt)
        except ValueError:
            continue
            
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    log(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.")
    return datetime.now()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    print("\n‚õîÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    print("üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    log("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        log("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤")
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        log("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        log("üì¢ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤ Wildberries...")
        log(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL // 60} –º–∏–Ω—É—Ç")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –±–æ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –≤–º–µ—Å—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
            log("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ event loop")
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            log("‚úÖ Event loop —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            loop.run_until_complete(run_bot())
            
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            sys.exit(1)
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º event loop
            loop.close()
            log("‚úÖ Event loop –∑–∞–∫—Ä—ã—Ç")
            log("üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
    except Exception as e:
        log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
        sys.exit(1)

async def run_bot():
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    log("üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∏ –±–æ—Ç–∞
        log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WildberriesAPI")
        wb_api = WildberriesAPI(WB_API_TOKEN, WB_FEEDBACK_TOKEN)
        log("‚úÖ WildberriesAPI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramBot")
        telegram_bot = TelegramBot(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, wb_api)
        log("‚úÖ TelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        log("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ")
        try:
            await telegram_bot.send_notification(
                "üü¢ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω</b>\n\n"
                f"‚è± –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {CHECK_INTERVAL // 60} –º–∏–Ω—É—Ç\n"
                "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n"
                "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏ API.\n"
                "üß™ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
            )
            log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
            log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        log(f"üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞: {TELEGRAM_BOT_TOKEN[:10]}...")
        log(f"üë• –ß–∞—Ç ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {TELEGRAM_CHAT_ID}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        log("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        await telegram_bot.start_bot()
        log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥")
        
        log("üîÑ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–æ–∫
        await run_periodic_checks(telegram_bot, wb_api)
    
    except asyncio.CancelledError:
        log("üõë –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_bot: {e}")
        log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
        raise

async def run_periodic_checks(telegram_bot, wb_api):
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    log("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
    
    try:
        while True:
            log(f"üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
            try:
                log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
                await check_orders_async(telegram_bot, wb_api)
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
                log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤—ã
            try:
                log("üëÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤")
                await check_feedbacks_async(telegram_bot, wb_api)
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {e}")
                log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–∞–∂–∏
            try:
                log("üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∂")
                await check_sales_async(telegram_bot, wb_api)
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–¥–∞–∂: {e}")
                log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
            
            log(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(CHECK_INTERVAL)
            
    except asyncio.CancelledError:
        log("üõë –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_periodic_checks: {e}")
        log(f"üìã –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
        raise

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async def check_orders_async(telegram_bot, wb_api):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})...")
    
    new_orders = wb_api.get_new_orders()
    if new_orders:
        log(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(new_orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        for order in new_orders:
            message = format_order_message(order)
            await telegram_bot.send_notification(message)
            await asyncio.sleep(0.5)
    else:
        log("üì≠ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")

async def check_feedbacks_async(telegram_bot, wb_api):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    log(f"üëÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})...")
    
    feedback_data = wb_api.check_new_feedbacks()
    if feedback_data is not None:
        has_new = feedback_data['has_new_feedbacks'] or feedback_data['has_new_questions']
        if has_new:
            message = (
                "‚ùóÔ∏è <b>–ü—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å!</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç–∞–ª –ø—Ä–æ–¥–∞–≤—Ü–∞."
            )
            await telegram_bot.send_notification(message)
            log(f"üì¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {feedback_data['feedbacks_count']} –æ—Ç–∑—ã–≤–æ–≤, {feedback_data['questions_count']} –≤–æ–ø—Ä–æ—Å–æ–≤")

async def check_sales_async(telegram_bot, wb_api):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤—ã–∫—É–ø–æ–≤"""
    log(f"üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∫—É–ø–æ–≤ ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})...")
    
    sales = wb_api.get_sales()
    
    if sales:
        log(f"üìà –ù–∞–π–¥–µ–Ω–æ {len(sales)} –Ω–æ–≤—ã—Ö –≤—ã–∫—É–ø–æ–≤")
        for sale in sales:
            message = format_sale_message(sale)
            await telegram_bot.send_notification(message)
            await asyncio.sleep(0.5)
    else:
        log("üìâ –ù–æ–≤—ã—Ö –≤—ã–∫—É–ø–æ–≤ –Ω–µ—Ç")

if __name__ == "__main__":
    main() 