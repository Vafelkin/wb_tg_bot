import requests
import schedule
import time
import signal
import sys
from datetime import datetime, timedelta
from telegram.ext import Application
from config import (
    TELEGRAM_BOT_TOKEN,
    TELEGRAM_CHAT_ID,
    WB_API_TOKEN,
    WB_FEEDBACK_TOKEN,
    WB_API_BASE_URL,
    WB_FEEDBACK_API_URL,
    CHECK_INTERVAL,
    FEEDBACK_CHECK_INTERVAL,
    SALES_CHECK_INTERVAL,
    ORDERS_DAYS_LOOK_BACK,
    MAX_ORDERS_PER_REQUEST,
    PAGINATION_DELAY,
    SALES_DAYS_LOOK_BACK
)

class WildberriesAPI:
    def __init__(self, stats_token, feedback_token):
        self.stats_token = stats_token
        self.feedback_token = feedback_token
        self.stats_headers = {'Authorization': stats_token}
        self.feedback_headers = {'Authorization': f'Bearer {feedback_token}'}
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ORDERS_DAYS_LOOK_BACK
        self._last_order_time = datetime.now() - timedelta(days=ORDERS_DAYS_LOOK_BACK)
        # –î–ª—è –ø—Ä–æ–¥–∞–∂ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ SALES_DAYS_LOOK_BACK –¥–Ω–∏
        self._last_sales_time = datetime.now() - timedelta(days=SALES_DAYS_LOOK_BACK)
        self._processed_orders = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö srid
        self._processed_sales = set()   # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö saleID
        self._last_feedback_check = None
        self._first_run = True  # –§–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    
    def _parse_date(self, date_str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        formats = [
            '%Y-%m-%dT%H:%M:%S.%fZ',  # –° –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
            '%Y-%m-%dT%H:%M:%S',      # –ë–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
            '%Y-%m-%dT%H:%M:%SZ'      # –° Z, –Ω–æ –±–µ–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
        ]
        
        for fmt in formats:
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
    
    def get_new_orders(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å Wildberries —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        all_orders = []
        next_date_from = self._last_order_time.strftime('%Y-%m-%dT%H:%M:%S.000Z')
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É
        first_run = self._first_run
        if first_run:
            print(f"üöÄ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –ø–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {ORDERS_DAYS_LOOK_BACK} –¥–Ω–µ–π")
            self._first_run = False
        
        while True:
            try:
                url = f"{WB_API_BASE_URL}/api/v1/supplier/orders"
                response = requests.get(
                    url,
                    headers=self.stats_headers,
                    params={
                        'dateFrom': next_date_from,
                        'flag': 0  # 0 - –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
                    }
                )
                response.raise_for_status()
                orders = response.json()
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                if not orders:
                    break
                
                # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ srid –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                # –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —Å—Ç–∞—Ä—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
                if first_run:
                    self._processed_orders.update(order.get('srid') for order in orders)
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
                    new_orders = [
                        order for order in orders 
                        if order.get('srid') not in self._processed_orders
                    ]
                    all_orders.extend(new_orders)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                    self._processed_orders.update(order.get('srid') for order in new_orders)
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(orders) < MAX_ORDERS_PER_REQUEST:
                    break
                    
                # –ë–µ—Ä–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                next_date_from = orders[-1]['lastChangeDate']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(PAGINATION_DELAY)
                
            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
                break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        self._last_order_time = datetime.now()
        
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        if first_run:
            return []
            
        return all_orders

    def check_new_feedbacks(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        current_time = datetime.now()
        if self._last_feedback_check and (current_time - self._last_feedback_check).total_seconds() < 600:
            return None

        try:
            url = f"{WB_FEEDBACK_API_URL}/api/v1/new-feedbacks-questions"
            response = requests.get(url, headers=self.feedback_headers)
            response.raise_for_status()
            result = response.json()

            self._last_feedback_check = current_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            if result.get('error'):
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {result.get('errorText')}")
                if result.get('additionalErrors'):
                    print(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏: {', '.join(result['additionalErrors'])}")
                return None

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            data = result.get('data', {})
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö –∏ –≤–æ–ø—Ä–æ—Å–∞—Ö
            feedback_info = {
                'has_new_feedbacks': data.get('hasNewFeedbacks', False),
                'has_new_questions': data.get('hasNewQuestions', False),
                'feedbacks_count': data.get('feedbacksCount', 0),
                'questions_count': data.get('questionsCount', 0)
            }
            
            return feedback_info

        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return None

    def get_sales(self, days_back=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —Å Wildberries —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        all_sales = []
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º SALES_DAYS_LOOK_BACK
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        first_run = days_back is not None
        if first_run:
            date_from = (datetime.now() - timedelta(days=days_back)).strftime('%Y-%m-%dT00:00:00.000Z')
            print(f"üöÄ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π")
        else:
            date_from = self._last_sales_time.strftime('%Y-%m-%dT%H:%M:%S.000Z')
        
        while True:
            try:
                url = f"{WB_API_BASE_URL}/api/v1/supplier/sales"
                response = requests.get(
                    url,
                    headers=self.stats_headers,
                    params={
                        'dateFrom': date_from,
                        'flag': 0  # 0 - –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏
                    },
                    timeout=30  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                )
                response.raise_for_status()
                sales = response.json()
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                if not sales:
                    break
                
                # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ saleID –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                # –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —Å—Ç–∞—Ä—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏
                if first_run:
                    self._processed_sales.update(sale.get('saleID') for sale in sales if sale.get('saleID'))
                else:    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
                    new_sales = [
                        sale for sale in sales 
                        if sale.get('saleID') not in self._processed_sales
                    ]
                    all_sales.extend(new_sales)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
                    self._processed_sales.update(sale.get('saleID') for sale in new_sales if sale.get('saleID'))
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(sales) < MAX_ORDERS_PER_REQUEST:
                    break
                    
                # –ë–µ—Ä–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                date_from = sales[-1]['lastChangeDate']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(PAGINATION_DELAY)
                
            except requests.exceptions.Timeout:
                print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–∞–π–º–∞—É—Ç).")
                break
            except requests.exceptions.ConnectionError:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.")
                break
            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂: {e}")
                break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–∞–∂ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        self._last_sales_time = datetime.now()
        
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        if first_run:
            return []
            
        return all_sales

class TelegramNotifier:
    def __init__(self, bot_token, chat_id):
        self.bot_token = bot_token
        self.chat_ids = [id.strip() for id in chat_id.split(',')]
        self.app = Application.builder().token(bot_token).build()
    
    async def send_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        try:
            for chat_id in self.chat_ids:
                await self.app.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode='HTML'
                )
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def format_order_message(order):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ (—Ç–æ–≤–∞—Ä –∑–∞–∫–∞–∑–∞–Ω, –Ω–æ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω)"""
    wb_api = WildberriesAPI(WB_API_TOKEN, WB_FEEDBACK_TOKEN)
    order_date = wb_api._parse_date(order['date'])
    return (
        f"üõç <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        f"üìù –ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞: {order.get('supplierArticle')}\n"
        f"üí≥ –ó–∞–ø–ª–∞—Ç–∏–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: {order.get('finishedPrice')} ‚ÇΩ\n"
        f"üíµ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: {order.get('priceWithDisc')} ‚ÇΩ\n"
        f"üí∞ –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {order.get('totalPrice')} ‚ÇΩ\n"
        f"üìç –†–µ–≥–∏–æ–Ω: {order.get('regionName')} –æ–±–ª., {order.get('oblastOkrugName')}\n"
        f"üè™ –°–∫–ª–∞–¥: {order.get('warehouseName')} ({order.get('warehouseType')})\n"
        f"üìÖ –î–∞—Ç–∞: {order_date.strftime('%d.%m.%Y %H:%M')}"
    )

def format_sale_message(sale):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–∫—É–ø–µ (—Ç–æ–≤–∞—Ä –ø–æ–ª—É—á–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º)"""
    wb_api = WildberriesAPI(WB_API_TOKEN, WB_FEEDBACK_TOKEN)
    sale_date = wb_api._parse_date(sale.get('date', sale.get('lastChangeDate')))
    
    return (
        f"üí∞ <b>–ù–æ–≤—ã–π –≤—ã–∫—É–ø!</b>\n\n"
        f"üìù –ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞: {sale.get('supplierArticle')}\n"
        f"üè∑Ô∏è –ë—Ä–µ–Ω–¥: {sale.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {sale.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üíµ –¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è: {sale.get('forPay', 0)} ‚ÇΩ\n"
        f"üßÆ –ö–æ–º–∏—Å—Å–∏—è: {sale.get('feeWB', 0)} ‚ÇΩ\n"
        f"üí∏ –ö –≤—ã–ø–ª–∞—Ç–µ: {sale.get('finishedPrice', 0)} ‚ÇΩ\n"
        f"üìç –†–µ–≥–∏–æ–Ω: {sale.get('regionName', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìÖ –î–∞—Ç–∞: {sale_date.strftime('%d.%m.%Y %H:%M')}"
    )

async def send_status_notification(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞"""
    notifier = TelegramNotifier(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    await notifier.send_notification(message)

async def check_orders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞–Ω—ã, –Ω–æ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã) –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    wb_api = WildberriesAPI(WB_API_TOKEN, WB_FEEDBACK_TOKEN)
    notifier = TelegramNotifier(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})...")
    
    new_orders = wb_api.get_new_orders()
    if new_orders:
        print(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(new_orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        for order in new_orders:
            message = format_order_message(order)
            await notifier.send_notification(message)
            await asyncio.sleep(0.5)
    else:
        print("üì≠ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")

async def check_feedbacks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    wb_api = WildberriesAPI(WB_API_TOKEN, WB_FEEDBACK_TOKEN)
    notifier = TelegramNotifier(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    
    print(f"üëÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})...")
    
    feedback_data = wb_api.check_new_feedbacks()
    if feedback_data is not None:
        has_new = feedback_data['has_new_feedbacks'] or feedback_data['has_new_questions']
        if has_new:
            message = (
                "‚ùóÔ∏è <b>–ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã!</b>\n\n"
                f"üìù –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {feedback_data['feedbacks_count']}\n"
                f"‚ùì –ù–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {feedback_data['questions_count']}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB."
            )
            await notifier.send_notification(message)
            print(f"üì¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {feedback_data['feedbacks_count']} –æ—Ç–∑—ã–≤–æ–≤, {feedback_data['questions_count']} –≤–æ–ø—Ä–æ—Å–æ–≤")

async def check_sales():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤—ã–∫—É–ø–æ–≤ (—Ç–æ–≤–∞—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã –∏ –ø—Ä–∏–Ω—è—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º) –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    wb_api = WildberriesAPI(WB_API_TOKEN, WB_FEEDBACK_TOKEN)
    notifier = TelegramNotifier(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    
    print(f"üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∫—É–ø–æ–≤ ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})...")
    
    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ–¥–∞–µ–º days_back, –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö - –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º
    # —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    static_run = False
    if not hasattr(check_sales, 'first_run'):
        check_sales.first_run = True
        static_run = True
    
    if check_sales.first_run:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–∫—É–ø—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        sales = wb_api.get_sales(days_back=SALES_DAYS_LOOK_BACK)
        check_sales.first_run = False
    else:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–∫—É–ø—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        sales = wb_api.get_sales()
    
    if sales:
        print(f"üìà –ù–∞–π–¥–µ–Ω–æ {len(sales)} –Ω–æ–≤—ã—Ö –≤—ã–∫—É–ø–æ–≤")
        for sale in sales:
            message = format_sale_message(sale)
            await notifier.send_notification(message)
            await asyncio.sleep(0.5)
    else:
        print("üìâ –ù–æ–≤—ã—Ö –≤—ã–∫—É–ø–æ–≤ –Ω–µ—Ç")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    print("\n‚õîÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º, –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    # –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å asyncio
    print("üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤ Wildberries...")
    print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
    print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {FEEDBACK_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
    print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–∞–∂: {SALES_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    asyncio.run(send_status_notification(
        "üü¢ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω</b>\n\n"
        f"‚è± –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {CHECK_INTERVAL // 60} –º–∏–Ω—É—Ç\n"
        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {FEEDBACK_CHECK_INTERVAL // 60} –º–∏–Ω—É—Ç\n"
        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–∞–∂: {SALES_CHECK_INTERVAL // 60} –º–∏–Ω—É—Ç"
    ))
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    asyncio.run(check_orders())
    asyncio.run(check_feedbacks())
    asyncio.run(check_sales())
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    schedule.every(CHECK_INTERVAL).seconds.do(lambda: asyncio.run(check_orders()))
    schedule.every(FEEDBACK_CHECK_INTERVAL).seconds.do(lambda: asyncio.run(check_feedbacks()))
    schedule.every(SALES_CHECK_INTERVAL).seconds.do(lambda: asyncio.run(check_sales()))
    
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == "__main__":
    import asyncio
    main() 